// Code generated by mockery v2.53.3. DO NOT EDIT.

package sendermocks

import (
	backend "github.com/dereulenspiegel/smolmailer/internal/backend"
	mock "github.com/stretchr/testify/mock"
)

// ReceiveProcessorMock is an autogenerated mock type for the ReceiveProcessor type
type ReceiveProcessorMock struct {
	mock.Mock
}

type ReceiveProcessorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceiveProcessorMock) EXPECT() *ReceiveProcessorMock_Expecter {
	return &ReceiveProcessorMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *ReceiveProcessorMock) Execute(_a0 *backend.ReceivedMessage) (*backend.ReceivedMessage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *backend.ReceivedMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*backend.ReceivedMessage) (*backend.ReceivedMessage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*backend.ReceivedMessage) *backend.ReceivedMessage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.ReceivedMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*backend.ReceivedMessage) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveProcessorMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ReceiveProcessorMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *backend.ReceivedMessage
func (_e *ReceiveProcessorMock_Expecter) Execute(_a0 interface{}) *ReceiveProcessorMock_Execute_Call {
	return &ReceiveProcessorMock_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *ReceiveProcessorMock_Execute_Call) Run(run func(_a0 *backend.ReceivedMessage)) *ReceiveProcessorMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*backend.ReceivedMessage))
	})
	return _c
}

func (_c *ReceiveProcessorMock_Execute_Call) Return(_a0 *backend.ReceivedMessage, _a1 error) *ReceiveProcessorMock_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiveProcessorMock_Execute_Call) RunAndReturn(run func(*backend.ReceivedMessage) (*backend.ReceivedMessage, error)) *ReceiveProcessorMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceiveProcessorMock creates a new instance of ReceiveProcessorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiveProcessorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceiveProcessorMock {
	mock := &ReceiveProcessorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
