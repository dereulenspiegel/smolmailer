// Code generated by mockery v2.51.1. DO NOT EDIT.

package smolmailer

import mock "github.com/stretchr/testify/mock"

// GenericQueueMock is an autogenerated mock type for the GenericQueue type
type GenericQueueMock[T interface{}] struct {
	mock.Mock
}

type GenericQueueMock_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *GenericQueueMock[T]) EXPECT() *GenericQueueMock_Expecter[T] {
	return &GenericQueueMock_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *GenericQueueMock[T]) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenericQueueMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type GenericQueueMock_Close_Call[T interface{}] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *GenericQueueMock_Expecter[T]) Close() *GenericQueueMock_Close_Call[T] {
	return &GenericQueueMock_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *GenericQueueMock_Close_Call[T]) Run(run func()) *GenericQueueMock_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericQueueMock_Close_Call[T]) Return(_a0 error) *GenericQueueMock_Close_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericQueueMock_Close_Call[T]) RunAndReturn(run func() error) *GenericQueueMock_Close_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function with no fields
func (_m *GenericQueueMock[T]) Receive() (T, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func() (T, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenericQueueMock_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type GenericQueueMock_Receive_Call[T interface{}] struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
func (_e *GenericQueueMock_Expecter[T]) Receive() *GenericQueueMock_Receive_Call[T] {
	return &GenericQueueMock_Receive_Call[T]{Call: _e.mock.On("Receive")}
}

func (_c *GenericQueueMock_Receive_Call[T]) Run(run func()) *GenericQueueMock_Receive_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericQueueMock_Receive_Call[T]) Return(item T, err error) *GenericQueueMock_Receive_Call[T] {
	_c.Call.Return(item, err)
	return _c
}

func (_c *GenericQueueMock_Receive_Call[T]) RunAndReturn(run func() (T, error)) *GenericQueueMock_Receive_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: item
func (_m *GenericQueueMock[T]) Send(item T) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenericQueueMock_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type GenericQueueMock_Send_Call[T interface{}] struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - item T
func (_e *GenericQueueMock_Expecter[T]) Send(item interface{}) *GenericQueueMock_Send_Call[T] {
	return &GenericQueueMock_Send_Call[T]{Call: _e.mock.On("Send", item)}
}

func (_c *GenericQueueMock_Send_Call[T]) Run(run func(item T)) *GenericQueueMock_Send_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *GenericQueueMock_Send_Call[T]) Return(_a0 error) *GenericQueueMock_Send_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericQueueMock_Send_Call[T]) RunAndReturn(run func(T) error) *GenericQueueMock_Send_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewGenericQueueMock creates a new instance of GenericQueueMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericQueueMock[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericQueueMock[T] {
	mock := &GenericQueueMock[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
