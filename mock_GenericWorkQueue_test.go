// Code generated by mockery v2.51.1. DO NOT EDIT.

package smolmailer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GenericWorkQueueMock is an autogenerated mock type for the GenericWorkQueue type
type GenericWorkQueueMock[T interface{}] struct {
	mock.Mock
}

type GenericWorkQueueMock_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *GenericWorkQueueMock[T]) EXPECT() *GenericWorkQueueMock_Expecter[T] {
	return &GenericWorkQueueMock_Expecter[T]{mock: &_m.Mock}
}

// Consume provides a mock function with given fields: ctx, worker
func (_m *GenericWorkQueueMock[T]) Consume(ctx context.Context, worker func(context.Context, T) error) error {
	ret := _m.Called(ctx, worker)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, T) error) error); ok {
		r0 = rf(ctx, worker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenericWorkQueueMock_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type GenericWorkQueueMock_Consume_Call[T interface{}] struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - ctx context.Context
//   - worker func(context.Context , T) error
func (_e *GenericWorkQueueMock_Expecter[T]) Consume(ctx interface{}, worker interface{}) *GenericWorkQueueMock_Consume_Call[T] {
	return &GenericWorkQueueMock_Consume_Call[T]{Call: _e.mock.On("Consume", ctx, worker)}
}

func (_c *GenericWorkQueueMock_Consume_Call[T]) Run(run func(ctx context.Context, worker func(context.Context, T) error)) *GenericWorkQueueMock_Consume_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, T) error))
	})
	return _c
}

func (_c *GenericWorkQueueMock_Consume_Call[T]) Return(_a0 error) *GenericWorkQueueMock_Consume_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericWorkQueueMock_Consume_Call[T]) RunAndReturn(run func(context.Context, func(context.Context, T) error) error) *GenericWorkQueueMock_Consume_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: ctx, item, options
func (_m *GenericWorkQueueMock[T]) Queue(ctx context.Context, item T, options ...queueOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, item)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T, ...queueOption) error); ok {
		r0 = rf(ctx, item, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenericWorkQueueMock_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type GenericWorkQueueMock_Queue_Call[T interface{}] struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - item T
//   - options ...queueOption
func (_e *GenericWorkQueueMock_Expecter[T]) Queue(ctx interface{}, item interface{}, options ...interface{}) *GenericWorkQueueMock_Queue_Call[T] {
	return &GenericWorkQueueMock_Queue_Call[T]{Call: _e.mock.On("Queue",
		append([]interface{}{ctx, item}, options...)...)}
}

func (_c *GenericWorkQueueMock_Queue_Call[T]) Run(run func(ctx context.Context, item T, options ...queueOption)) *GenericWorkQueueMock_Queue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]queueOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(queueOption)
			}
		}
		run(args[0].(context.Context), args[1].(T), variadicArgs...)
	})
	return _c
}

func (_c *GenericWorkQueueMock_Queue_Call[T]) Return(_a0 error) *GenericWorkQueueMock_Queue_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericWorkQueueMock_Queue_Call[T]) RunAndReturn(run func(context.Context, T, ...queueOption) error) *GenericWorkQueueMock_Queue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewGenericWorkQueueMock creates a new instance of GenericWorkQueueMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericWorkQueueMock[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericWorkQueueMock[T] {
	mock := &GenericWorkQueueMock[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
