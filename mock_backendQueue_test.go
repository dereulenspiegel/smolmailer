// Code generated by mockery v2.50.4. DO NOT EDIT.

package smolmailer

import mock "github.com/stretchr/testify/mock"

// backendQueueMock is an autogenerated mock type for the backendQueue type
type backendQueueMock struct {
	mock.Mock
}

type backendQueueMock_Expecter struct {
	mock *mock.Mock
}

func (_m *backendQueueMock) EXPECT() *backendQueueMock_Expecter {
	return &backendQueueMock_Expecter{mock: &_m.Mock}
}

// QueueMessage provides a mock function with given fields: msg
func (_m *backendQueueMock) QueueMessage(msg *QueuedMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for QueueMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*QueuedMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// backendQueueMock_QueueMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueMessage'
type backendQueueMock_QueueMessage_Call struct {
	*mock.Call
}

// QueueMessage is a helper method to define mock.On call
//   - msg *QueuedMessage
func (_e *backendQueueMock_Expecter) QueueMessage(msg interface{}) *backendQueueMock_QueueMessage_Call {
	return &backendQueueMock_QueueMessage_Call{Call: _e.mock.On("QueueMessage", msg)}
}

func (_c *backendQueueMock_QueueMessage_Call) Run(run func(msg *QueuedMessage)) *backendQueueMock_QueueMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*QueuedMessage))
	})
	return _c
}

func (_c *backendQueueMock_QueueMessage_Call) Return(_a0 error) *backendQueueMock_QueueMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *backendQueueMock_QueueMessage_Call) RunAndReturn(run func(*QueuedMessage) error) *backendQueueMock_QueueMessage_Call {
	_c.Call.Return(run)
	return _c
}

// newBackendQueueMock creates a new instance of backendQueueMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newBackendQueueMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *backendQueueMock {
	mock := &backendQueueMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
