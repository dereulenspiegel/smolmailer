// Code generated by mockery v2.50.4. DO NOT EDIT.

package smolmailer

import mock "github.com/stretchr/testify/mock"

// queueMock is an autogenerated mock type for the queue type
type queueMock struct {
	mock.Mock
}

type queueMock_Expecter struct {
	mock *mock.Mock
}

func (_m *queueMock) EXPECT() *queueMock_Expecter {
	return &queueMock_Expecter{mock: &_m.Mock}
}

// QueueSession provides a mock function with given fields: s
func (_m *queueMock) QueueSession(s *Session) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for QueueSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Session) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// queueMock_QueueSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSession'
type queueMock_QueueSession_Call struct {
	*mock.Call
}

// QueueSession is a helper method to define mock.On call
//   - s *Session
func (_e *queueMock_Expecter) QueueSession(s interface{}) *queueMock_QueueSession_Call {
	return &queueMock_QueueSession_Call{Call: _e.mock.On("QueueSession", s)}
}

func (_c *queueMock_QueueSession_Call) Run(run func(s *Session)) *queueMock_QueueSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session))
	})
	return _c
}

func (_c *queueMock_QueueSession_Call) Return(_a0 error) *queueMock_QueueSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *queueMock_QueueSession_Call) RunAndReturn(run func(*Session) error) *queueMock_QueueSession_Call {
	_c.Call.Return(run)
	return _c
}

// newQueueMock creates a new instance of queueMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newQueueMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *queueMock {
	mock := &queueMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
