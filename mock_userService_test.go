// Code generated by mockery v2.51.1. DO NOT EDIT.

package smolmailer

import mock "github.com/stretchr/testify/mock"

// userServiceMock is an autogenerated mock type for the userService type
type userServiceMock struct {
	mock.Mock
}

type userServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *userServiceMock) EXPECT() *userServiceMock_Expecter {
	return &userServiceMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: username, password
func (_m *userServiceMock) Authenticate(username string, password string) error {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// userServiceMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type userServiceMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *userServiceMock_Expecter) Authenticate(username interface{}, password interface{}) *userServiceMock_Authenticate_Call {
	return &userServiceMock_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password)}
}

func (_c *userServiceMock_Authenticate_Call) Run(run func(username string, password string)) *userServiceMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *userServiceMock_Authenticate_Call) Return(_a0 error) *userServiceMock_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *userServiceMock_Authenticate_Call) RunAndReturn(run func(string, string) error) *userServiceMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidSender provides a mock function with given fields: username, from
func (_m *userServiceMock) IsValidSender(username string, from string) bool {
	ret := _m.Called(username, from)

	if len(ret) == 0 {
		panic("no return value specified for IsValidSender")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, from)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// userServiceMock_IsValidSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidSender'
type userServiceMock_IsValidSender_Call struct {
	*mock.Call
}

// IsValidSender is a helper method to define mock.On call
//   - username string
//   - from string
func (_e *userServiceMock_Expecter) IsValidSender(username interface{}, from interface{}) *userServiceMock_IsValidSender_Call {
	return &userServiceMock_IsValidSender_Call{Call: _e.mock.On("IsValidSender", username, from)}
}

func (_c *userServiceMock_IsValidSender_Call) Run(run func(username string, from string)) *userServiceMock_IsValidSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *userServiceMock_IsValidSender_Call) Return(_a0 bool) *userServiceMock_IsValidSender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *userServiceMock_IsValidSender_Call) RunAndReturn(run func(string, string) bool) *userServiceMock_IsValidSender_Call {
	_c.Call.Return(run)
	return _c
}

// newUserServiceMock creates a new instance of userServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newUserServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *userServiceMock {
	mock := &userServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
